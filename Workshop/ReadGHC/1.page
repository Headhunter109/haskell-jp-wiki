# 調整/当日スケジュール

[(日程調整中) GHCソースコードリーディング勉強会 第1回(RTS編？) - [PARTAKE]](http://partake.in/events/6b514842-c0bf-48c9-962b-4f5d60b908c0)

## 会場案

* @kazu_yamamoto : @master_q GHC ソースコードリーディングですが、6月9日以降の土日なら、IIJ の会議室 を貸し出せると思います。
* 田町のミラクルリナックス会議室を貸してもらえそう 最大15人が限界
* 結局ミラクルリナックスで開催となった。

# 資料
## GHC RTS起動時のコールグラフ

~~~ {.text}
hs_init(int *argc, char **argv[])
-> hs_init_ghc(int *argc, char **argv[], RtsConfig rts_config)
   -> initScheduler()
      -> initCapabilities()
         -> moreCapabilities(0, RtsFlags.ParFlags.nNodes)
            for i in 0..RtsFlags.ParFlags.nNodes
            -> initCapability(&capabilities[i], i)
               initMutex(capabilities[i].lock)
               # その他capabilities[i]のメンバーを初期値でうめる
         n_capabilities = RtsFlags.ParFlags.nNodes
         enabled_capabilities = n_capabilities
         last_free_capability = &capabilities[0] # 後でIOスレッド用に使う
      -> initTaskManager()
      -> startWorkerTasks(1, n_capabilities)
         for i in 1..n_capabilities
         -> startWorkerTask(&capabilities[i])
            task = newTask(rtsTrue)
            task->cap = &capabilities[i]
            capabilities[i].running_task = task
            createOSThread(&tid, (OSThreadProc*)workerStart, task)
            -> workerStart(Task *task) # 新しいスレッド
               -> setMyTask(task)
                  setThreadLocalVar(&currentTaskKey,task)
               -> newInCall(task)
                  incall = stgMallocBytes((sizeof(InCall)), "newBoundTask")
                  incall->task = task
                  incall->prev_stack = task->incall
                  task->incall = incall
               -> scheduleWorker(task->cap,task)
                  cap = schedule(task->cap,task) # スケジュールループ
                  releaseCapability_(cap,rtsFalse)
                  workerTaskStop(task)
            task->id = tid
            # これでCapabilityの数だけWorkerスレッド(Task)を作れた
            # この時点ではCapability<=>Task<=>InCallは1対1対1写像
   -> initStorage()
      xxxxxxxxxxxxxxxxxxxxxxxx この中はもっと読む必要有り
   -> getStablePtr((StgPtr)xxxx_closure) # xxxxxxxxx GCルートの設定？
   -> initTimer()
   -> startTimer()
   -> ioManagerStart()
      -> cap = rts_lock()
         -> task = newBoundTask()
            -> task = allocTask()
               -> task = myTask()
                  task = newTask(rtsFalse)
                  ask->id = osThreadId()
                  setMyTask(task)
                  return task
            newInCall(task)
         -> waitForReturnCapability(&cap, task)
            cap = last_free_capability
            task->cap = cap
            cap->running_task = task
         return cap
      -> ioManagerStartCap(&cap)
         -> rts_evalIO(cap,&base_GHCziConcziIO_ensureIOManagerIsRunning_closure,NULL)
            -> tso = createStrictIOThread(*cap, RtsFlags.GcFlags.initialStkSize, p)
               -> StgTSO *t = createThread(cap, stack_size)
                  stack = (StgStack *)allocate(cap, stack_size)
                  tso = (StgTSO *)allocate(cap, sizeofW(StgTSO))
                  tso->what_next = ThreadRunGHC
                  tso->stackobj = stack
                  tso->id = next_thread_id++
                  tso->global_link = g0->threads
                  g0->threads = tso
               pushClosure(t, (W_)&stg_forceIO_info)
               pushClosure(t, (W_)&stg_ap_v_info)
               pushClosure(t, (W_)closure) # base_GHCziConcziIO_ensureIOManagerIsRunning_closure
               pushClosure(t, (W_)&stg_enter_info)
               # xxxxx このクロージャの設定がHaskell worldとの橋？
               #     pushClosureを読むかぎりだとStgTSOのスタックに積むだけ
               return t
            -> scheduleWaitThread(tso,ret,cap)
               task = cap->running_task
               tso->bound = task->incall
               tso->cap = cap
               task->incall->tso = tso
               -> appendToRunQueue(cap,tso)
                  cap->run_queue_hd = tso
                  tso->block_info.prev = END_TSO_QUEUE
                  cap->run_queue_tl = tso
               cap = schedule(cap,task) # スケジュールループ
~~~

# 議事録
## 発表資料

* [GCをみればRTSが見えてくる、かも。。。](http://www.slideshare.net/dec9ue/rts-gc)
* [Dive into RTS - another side](http://www.slideshare.net/master_q/dive-into-rts-another-side)

## togetter

T.B.D.

## 録画と写真

[写真](http://www.flickr.com/photos/masterq/sets/72157631649911818/)

[録画1](http://www.justin.tv/kiwamu/b/333861161)
[録画2](http://www.justin.tv/kiwamu/b/333861204)
[録画3](http://www.justin.tv/kiwamu/b/333861287)

## ネタ案出し

![](http://farm9.staticflickr.com/8459/8035488859_567ce685f1.jpg)

# 懇親会

ピザ頼んだ。

~~~
■ご注文明細
└─────────────
　----------------------------------------
　○マルゲリータ
　　レギュラークラスト　Lサイズ
　　数量:1　計:2,800円
　----------------------------------------
　○ドミノ・デラックス
　　レギュラークラスト　Lサイズ
　　数量:1　計:3,000円
　----------------------------------------
　○グリル野菜たっぷりのピッツァ
　　レギュラークラスト　Lサイズ
　　数量:1　計:3,280円
　----------------------------------------
　△ネット注文特典 5%OFF
　　数量:1　計:454円引き
　----------------------------------------

　合計金額　8,626円（うち消費税410円）
~~~

他会計。ビアバッシュ安いですね。

![](http://farm9.staticflickr.com/8173/8035466175_557db848a6_n.jpg)

# 次回
[2]()