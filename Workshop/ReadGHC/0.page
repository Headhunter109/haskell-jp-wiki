# 調整/当日スケジュール
[GHCソースコードリーディング勉強会 第0回(準備編) - [PARTAKE]](http://partake.in/events/57179633-b2ad-4e7d-b56e-c4ac8e6b178e)

# 資料
* GHC の機能と関わりの深いライブラリやツールなどの取得

~~~ {.text}
どの部分を読むかにもよりますが、GHC の機能の一部は base パッケージや
DPH ライブラリ（並列配列）、haddock など外部のライブラリやツールと関
わっているので、ちゃんと読もうとするなら、その辺も取得しておく必要が
ありますね。（またビルド時にはこれらのライブラリやツールが必要です。）

git clone 後、以下のコマンドを実行して下さい。

./sync-all get

テストやベンチマーク、その他のライブラリも必要なら、こちらのコマンド
になります。

./sync-all --testsuite --nofib --extra get

 http://hackage.haskell.org/trac/ghc/wiki/Building/GettingTheSources
 http://hackage.haskell.org/trac/ghc/wiki/Repositories

（GHC に DPH ライブラリの同梱されていない）ghc-7.4 branch などをビル
ドする場合、DPH ライブラリの取得には --dph オプションが必要です。逆に
HEAD などで DPH ライブラリが不要な場合には --no-dph が必要です。
~~~

* ghc --make実行時のコールグラフ

~~~ {.text}
  → doMake -- ghc/Main.hs
    targets <- mapM (uncurry GHC.guessTarget) hs_srcs
    GHC.setTargets targets -- セッション情報のhsc_targetsを設定
    ok_flag <- GHC.load LoadAllTargets
    → load -- compiler/main/GhcMake.hs
      → load2
        → upsweep
          → upsweep_mod 
            → compile_it
              → compile -- compiler/main/DriverPipeline.hs
                → compile'
                  → runCompiler batchCompiler handleBatch
                    → hscCompileBatch -- compiler/main/HscMain.hs
                      → genericHscCompile hscBatchCompiler batchMsg
                         compile RecompRequired
                         → runHsc hsc_env $ hscRecompile compiler mod_summary mb_old_hash
                           → genericHscRecompile hscBatchCompiler
                             tc_result <- hscFileFrontEnd mod_summary
                             hscBackend compiler tc_result mod_summary mb_old_hash
                             → genericHscBackend hscBatchCompiler
                               guts <- hscDesugar' (ms_location mod_summary) tc_result
                               → deSugar -- compiler/deSugar/Desugar.lhs
                               hscGenOutput compiler guts mod_summary mb_old_hash
                               → hscGenOutput = \guts0 mod_summary mb_old_iface -> do
                                 guts <- hscSimplify' guts0
                                 (iface, changed, details, cgguts) <- hscNormalIface guts mb_old_iface
                                 hscWriteIface iface changed mod_summary
                                 hasStub <- hscGenHardCode cgguts mod_summary
                    linkable <- handleBatch result
~~~

# 事前アンケート

## 本勉強会に期待すること
* GHC の構成概要の理解、GHCで使われているテクニックが理解できること @utotch
* GHC と関係なくてもよいですが、皆さんが Haskell 界隈で興味を持っていること(Web とか コンパイラとか Graphics とか,,,)の情報共有 @utotch
* Haskell を仕事で活用している人の情報共有 などなどができるとうれしいな。 @utotch
* cabalの概要、現状の仕組み、問題点 @ruicc
* [ghc --make に -j オプションを加える](http://hackage.haskell.org/trac/ghc/ticket/910)（[ghc-parmake](http://hackage.haskell.org/package/ghc-parmake)の機能を取り込む）ための課題の理解 @shelarcy
* GHC由来で発生したバグを取る方法 @ruicc
* HaskellをJVM上で動かすために障害となるもの、制約:) @ruicc
* [House](http://web.cecs.pdx.edu/~kennyg/house/) など組込み向けGHC拡張パッチの理解 @master_q

## GHCのどの部分に興味がありますか？
* 高速化のための工夫 @utotch
* LLVM との融合 @utotch
* GHC pluginの仕組み、概要、作りかた @ruicc
* 途中で作成される中間データ別概要 @ruicc
* 各中間データ上で実行される最適化手法 @ruicc
* クロスコンパイル/クロスビルド機能（の現状） @shelarcy

## LTネタありますか？

* 第0回じゃない気がしますが，[HaskellImplementorsWorkshop/2011/Takano - HaskellWiki](http://www.haskell.org/haskellwiki/HaskellImplementorsWorkshop/2011/Takano) や [情報処理学会 第86回プログラミング研究会 (2010年11月) - プログラム](http://www.shudo.net/sigpro/2011-3/program.html) で発表したGHCの改造のことなら話せると思います．主にCore〜C--とRTS周辺です．みなさん興味ないかもしれませんが @tyasunao
* [House](http://programatica.cs.pdx.edu/House/) のGHC patchについて説明できるかも。。 @master_q
* [AboutVideos – GHC](http://hackage.haskell.org/trac/ghc/wiki/AboutVideos) これ全員で見る？ @shelarcy

# 議事録

## 録画と写真

## ネタ案出し

# 次回
[1]()
