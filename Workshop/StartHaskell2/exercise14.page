# 『もうちょっとだけモナド』　練習問題

## Writerモナド

## 差分リスト

## Readerモナド

## Stateモナド

## Eitherモナド

(p.342 NOTE) ピエールのバランス棒に鳥がとまる様子をシミュレートしました。ピエールが滑って落ちた瞬間に棒の左右に何羽の鳥が止まってるか分かるように、Eitherモナドを使って書き直してみよう。

~~~{ .haskell }
import Control.Monad.Error

type Birds = Int
type Pole  = (Birds, Birds)

landLeft :: Birds -> Pole -> Maybe Pole
landLeft n (left, right)
  | abs ((left + n) - right) < 4 = Just (left + n, right)
  | otherwise                    = Nothing

landRight :: Birds -> Pole -> Maybe Pole
landRight n (left, right)
  | abs (left - (right + n)) < 4 = Just (left, right + n)
  | otherwise                    = Nothing

banana :: Pole -> Maybe Pole
banana _ = Nothing

routine :: Maybe Pole
routine = do
  start  <- return (0,0)
  first  <- landLeft 2 start
  second <- landRight 2 first
  landLeft 1 second
~~~
 
## Prob(確率)モナド

(p.361) 結果が一致する事象の確率をまとめる関数 joinSameOutcomes を書いてみよう。


~~~ { .haksell }
import Data.Ratio

newtype Prob a = Prob { getProb :: [(a, Rational)] } deriving Show

instance Functor Prob where
  fmap f (Prob xs) Prob $ map (\(x, p) -> (f x, p)) xs

instance Monad Prob where
  return x = Prob [(x, 1%1)]
  m >>= f = flatten (fmap f m)
  fail _ = Prob []

flatten :: Prob (Prob a) -> Prob a
flatten (Prob xs) = Prob $ concat $ map multAll xs
  where multAll (Prob innerxs, p) = map (\(x, r) -> (x, p*r)) innerxs

joinSameOutcomes :: Prob a -> Prob a
~~~





