# 『もうちょっとだけモナド』　練習問題

## Writerモナド

逆ポーランド記法で書かれた式を計算する関数 solveRPN (p.214) に、Writerモナドを使って計算経過ログをとる機能を追加してみよう。

~~~ { .haskell }
import Control.Monad.Writer

solveRPN :: String -> Double
solveRPN = head . foldl foldingFunction [] . words
  where
    foldingFunction (x:y:ys) "*" = (y * x) : ys
    foldingFunction (x:y:ys) "+" = (y + x) : ys
    foldingFunction (x:y:ys) "-" = (y - x) : ys
    foldingFunction xs       str = read str : xs
~~~

## 差分リスト

誰かよろしくお願いします


## モナドとしての関数

関数のモナドの定義を見ながら、無理やり使える例を探してみよう。

~~~ { .haskell }
instance Monad ((-> r) where
  return x = \_ -> x
  h >>= f = \w -> f (h w) w
~~~

たとえば、リストの前半分だけ取る関数 takeHalf は、こんな風に書ける（あまり書こうとは思わないけど）。

~~~ { .haskell }
import Control.Monad.Instances

takeHalf :: [a] -> [a]
takeHalf = (`div`2).length >>= take
~~~


## Readerモナドを使ってみる

いまUnixの環境変数を、変数名と値の連想リストで表すことにする。

~~~ { .haskell }
type Env = [(String, String)]

environment :: Env
environment = 
  [ ("HOME", "/home/haskell")
  , ("PATH", "/bin:/usr/bin")
  , ("LANG", "ja_JP.UTF-8")
  ]
~~~

[Control.Monad.Reader](http://hackage.haskell.org/packages/archive/mtl/latest/doc/html/Control-Monad-Reader.html)で定義されている Reader モナドでは、 ask 関数を使って、環境を参照することができる。


環境変数から指定された変数名の値を探してくる関数 lookupEnv を実装しよう。ただし、変数名が見つからない場合は、空文字を返す。

~~~ { .haskell }
import Control.Monad.Reader

lookupEnv :: String -> Reader Env String
lookupEnv key = do
  env <- ask
  ...

test = runReader (lookupEnv "LANG") environment
~~~

また、$HOME が設定されていればその値を返し、なければ "/etc" を返す関数 getConfPath を書いてみよう。

~~~ { .haskell }
import Control.Monad.Reader

getConfPath :: Reader Env String
~~~


## Stateモナド

2次元平面上を移動する処理を書いてみよう。（上下左右の座標実装はお任せ）


~~~ { .haskell }
import Control.Monad.State

type Point = (Int, Int)

move :: Char -> State Point ()
move 'u' (x,y) =  -- 上へ移動
move 'd' (x,y) =  -- 下へ移動
move 'l' (x,y) =  -- 左へ移動
move 'r' (x,y) =  -- 右へ移動

moveGame :: String -> State Point ()
moveGame []     =
moveGame (c:cs) =

main :: IO ()
main = print $ evalState (moveGame "ulrdddlr") (0,0)
~~~

## Eitherモナド

(p.342 NOTE) ピエールのバランス棒に鳥がとまる様子をシミュレートしました。ピエールが滑って落ちた瞬間に棒の左右に何羽の鳥が止まってるか分かるように、Eitherモナドを使って書き直してみよう。

~~~{ .haskell }
import Control.Monad.Error

type Birds = Int
type Pole  = (Birds, Birds)

landLeft :: Birds -> Pole -> Maybe Pole
landLeft n (left, right)
  | abs ((left + n) - right) < 4 = Just (left + n, right)
  | otherwise                    = Nothing

landRight :: Birds -> Pole -> Maybe Pole
landRight n (left, right)
  | abs (left - (right + n)) < 4 = Just (left, right + n)
  | otherwise                    = Nothing

banana :: Pole -> Maybe Pole
banana _ = Nothing

routine :: Maybe Pole
routine = do
  start  <- return (0,0)
  first  <- landLeft 2 start
  second <- landRight 2 first
  landLeft 1 second
~~~


## Prob(確率)モナド

(p.361) 結果が一致する事象の確率をまとめる関数 joinSameOutcomes を書いてみよう。


~~~ { .haskell }
import Data.Ratio

newtype Prob a = Prob { getProb :: [(a, Rational)] } deriving Show

instance Functor Prob where
  fmap f (Prob xs) Prob $ map (\(x, p) -> (f x, p)) xs

instance Monad Prob where
  return x = Prob [(x, 1%1)]
  m >>= f = flatten (fmap f m)
  fail _ = Prob []

flatten :: Prob (Prob a) -> Prob a
flatten (Prob xs) = Prob $ concat $ map multAll xs
  where multAll (Prob innerxs, p) = map (\(x, r) -> (x, p*r)) innerxs

joinSameOutcomes :: Eq a => Prob a -> Prob a
joinSameOutcomes = ....
~~~

