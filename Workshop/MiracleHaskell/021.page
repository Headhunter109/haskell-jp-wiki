## 日時

2012/11/16

## 内容

次回は
[Applicative functors](http://learnyouahaskell.com/functors-applicative-functors-and-monoids#applicative-functors)
から再開します。

## みんなの宿題

[Recursive data structures](http://learnyouahaskell.com/making-our-own-types-and-typeclasses#recursive-data-structures)
ではList aという型でリスト型を作りました。

~~~ {.haskell}
infixr 5 :-:  
data List a = Empty | a :-: (List a) deriving (Show, Read, Eq, Ord)  
~~~

Functorを継承することで、このList a型にfmapを使えるようにしてみてください。
実行例は以下になります。

~~~
ghci> fmap (+1) (3 :-: 4 :-: 5 :-: Empty)
4 :-: (5 :-: (6 :-: Empty))
~~~

### ヒント

通常のリストは以下のようにfmapの実装はmap関数そのままです。
List a型にmap関数を作れば、それをfmapとして使えそうですね！

~~~ {.haskell}
instance Functor [] where
    fmap = map
~~~

## 岡部の宿題

