# 『高階関数』　練習問題


## 部分適用された関数の型

以下の式の型はなんですか。

~~~ {.haskell}
max 5
~~~
* * * * *
## コラッツ数列

コラッツ数列を返す関数を実装してみよう。

与えられた数nに、以下の操作を繰り返し適用して、数列を生成する。

- nが偶数なら、n/2 を返す
- nが奇数なら、2*n+1 を返す

たとえば 13 から始めた場合、以下のような数列が得られる。

~~~
13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
~~~

このような数列（コラッツ数列）は、最終的には必ず1にたどり着くと予想されているが、未解決問題となっている。  [コラッツ問題 Wikipedia](http://ja.wikipedia.org/wiki/%E3%82%B3%E3%83%A9%E3%83%83%E3%83%84%E3%81%AE%E5%95%8F%E9%A1%8C)

コラッツ数列を返す関数を実装してみよう。


~~~ {.haskell}
collatz :: Int -> [Int]
~~~

実行例

~~~ {.haskell}
ghci> collatz 13
[13,40,20,10,5,16,8,4,2,1]
~~~

1 から 100 までの数で、コラッツ数列がもっとも長いものは何ですか。

* * * * *
## 関数適用と関数合成

以下の関数の括弧を、関数適用($)で書き換えてみよう。(p.83, p.84)

~~~ {.haskell}
g :: [a] -> [a]
g xs = tail (tail (tail (tail xs)))

f :: [Int] -> [Int]
f xs = take 10 (map (*3) (filter even xs))

sqrtSums :: Int
sqrtSum = length (takeWhile (<1000) (scanl1 (+) (map sqrt [1..]))) + 1
~~~

同じものを関数合成(.)を使って書き直してみよう。

* * * * *
## ポイントフリースタイル

以下の関数をポイントフリースタイルで書き直してみよう。 (p.87)


~~~ {.haskell}
f n = 2*n + 1
g n m = 2*n + m
~~~



# 練習問題リンク集

- [スタートHaskell 2011 高階関数 練習問題](https://github.com/yuzutechnology/Community-StartHaskell2011/blob/master/exercises/chapter07/Chapter07-ja.md)